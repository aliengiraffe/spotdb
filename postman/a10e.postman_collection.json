{
  "info": {
    "_postman_id": "c1ed13ad-c547-4bac-b84d-2c455ab1403b",
    "name": "SpotDB",
    "description": "A lightweight Docker container that runs DuckDB with a Go API for socket connections and CSV uploads.  \nProvides HTTP endpoints for CSV file uploads, SQL queries, and table management.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "43628134"
  },
  "item": [
    {
      "name": "health",
      "item": [
        {
          "name": "Health check endpoint",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test HTTP status code",
                  "pm.test(\"Status code is 200\", function () {",
                  "   pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Test response body",
                  "pm.test(\"Response body contains 'OK'\", function () {",
                  "   pm.expect(pm.response.text()).to.equal(\"OK\");",
                  "});",
                  "",
                  "// Test response headers",
                  "pm.test(\"Content-Type header is present\", function () {",
                  "   pm.response.to.have.header(\"Content-Type\");",
                  "});",
                  "",
                  "// Test response time",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "   pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "// Test status code name",
                  "pm.test(\"Status code name has string 'OK'\", function () {",
                  "   pm.response.to.have.status(\"OK\");",
                  "});",
                  "",
                  "// Test that response is not empty",
                  "pm.test(\"Response is not empty\", function () {",
                  "   pm.expect(pm.response.text().length).to.be.greaterThan(0);",
                  "});",
                  "",
                  "// Test that response size is small",
                  "pm.test(\"Response size is less than 1KB\", function () {",
                  "   pm.expect(pm.response.size().total).to.be.below(1024);",
                  "});",
                  "",
                  "// Test for successful connection",
                  "pm.test(\"Connection was successful\", function () {",
                  "   pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "// Test for response format",
                  "pm.test(\"Response is text format\", function () {",
                  "   pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');",
                  "});",
                  "",
                  "// Test for response time threshold for health check",
                  "pm.test(\"Health check response time is acceptable\", function () {",
                  "   pm.expect(pm.response.responseTime).to.be.below(50);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "text/plain"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/healthcheck",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "healthcheck"]
            },
            "description": "Returns the health status of the service"
          },
          "response": [
            {
              "name": "Service is healthy",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "text/plain"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/healthcheck",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "healthcheck"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": "<string>"
            }
          ]
        }
      ]
    },
    {
      "name": "api",
      "item": [
        {
          "name": "upload",
          "item": [
            {
              "name": "Upload CSV file",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Test overall response structure",
                      "pm.test(\"Response has the expected structure\", function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('columns').that.is.an('array');",
                      "    pm.expect(responseJson).to.have.property('row_count').that.is.a('number');",
                      "    pm.expect(responseJson).to.have.property('table').that.is.a('string');",
                      "});",
                      "",
                      "// Test table name",
                      "pm.test(\"Table name is patient_data\", function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.table).to.equal('patient_data');",
                      "});",
                      "",
                      "// Test row_count is valid",
                      "pm.test(\"row_count is 1000\", function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.row_count).to.equal(1000);",
                      "});",
                      "",
                      "// Test columns array structure",
                      "pm.test(\"Columns array contains expected column definitions\", function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.columns).to.be.an('array');",
                      "    pm.expect(responseJson.columns.length).to.equal(8);",
                      "    ",
                      "    responseJson.columns.forEach(column => {",
                      "        pm.expect(column).to.have.property('cid').that.is.a('number');",
                      "        pm.expect(column).to.have.property('name').that.is.a('string');",
                      "        pm.expect(column).to.have.property('type').that.is.a('string');",
                      "        pm.expect(column).to.have.property('notnull').that.is.a('boolean');",
                      "        pm.expect(column).to.have.property('pk').that.is.a('boolean');",
                      "        // dflt_value can be null",
                      "        pm.expect(column).to.have.property('dflt_value');",
                      "    });",
                      "});",
                      "",
                      "// Test column names",
                      "pm.test(\"Column names match expected schema\", function () {",
                      "    const responseJson = pm.response.json();",
                      "    const columnNames = responseJson.columns.map(col => col.name);",
                      "    const expectedColumnNames = [",
                      "        \"patient_id\", \"first_name\", \"last_name\", \"email\", ",
                      "        \"date_of_birth\", \"medicine\", \"diagnosis\", \"income\"",
                      "    ];",
                      "    ",
                      "    pm.expect(columnNames).to.have.members(expectedColumnNames);",
                      "});",
                      "",
                      "// Test column types",
                      "pm.test(\"Column types match expected schema\", function () {",
                      "    const responseJson = pm.response.json();",
                      "    const columnsByName = {};",
                      "    ",
                      "    responseJson.columns.forEach(col => {",
                      "        columnsByName[col.name] = col;",
                      "    });",
                      "    ",
                      "    pm.expect(columnsByName.patient_id.type).to.equal('BIGINT');",
                      "    pm.expect(columnsByName.first_name.type).to.equal('VARCHAR');",
                      "    pm.expect(columnsByName.last_name.type).to.equal('VARCHAR');",
                      "    pm.expect(columnsByName.email.type).to.equal('VARCHAR');",
                      "    pm.expect(columnsByName.date_of_birth.type).to.equal('DATE');",
                      "    pm.expect(columnsByName.medicine.type).to.equal('VARCHAR');",
                      "    pm.expect(columnsByName.diagnosis.type).to.equal('VARCHAR');",
                      "    pm.expect(columnsByName.income.type).to.equal('VARCHAR');",
                      "});",
                      "",
                      "// Test column indexes",
                      "pm.test(\"Column indexes (cid) are sequential\", function() {",
                      "    const responseJson = pm.response.json();",
                      "    ",
                      "    for (let i = 0; i < responseJson.columns.length; i++) {",
                      "        pm.expect(responseJson.columns[i].cid).to.equal(i);",
                      "    }",
                      "});",
                      "",
                      "// Test no primary key is defined",
                      "pm.test(\"No primary key is defined in the schema\", function() {",
                      "    const responseJson = pm.response.json();",
                      "    const hasPrimaryKey = responseJson.columns.some(col => col.pk === true);",
                      "    ",
                      "    pm.expect(hasPrimaryKey).to.be.false;",
                      "});",
                      "",
                      "// Test not-null constraints",
                      "pm.test(\"All columns are nullable\", function() {",
                      "    const responseJson = pm.response.json();",
                      "    const allNullable = responseJson.columns.every(col => col.notnull === false);",
                      "    ",
                      "    pm.expect(allNullable).to.be.true;",
                      "});",
                      "",
                      "// Test HTTP response time is acceptable",
                      "pm.test(\"Response time is less than 100ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(100);",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "multipart/form-data"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "table_name",
                      "value": "{{table_name}}",
                      "description": "(Required) Name of the table to create",
                      "type": "text"
                    },
                    {
                      "key": "csv_file",
                      "description": "(Required) The CSV file to upload",
                      "type": "file",
                      "src": "./postman/patient_data.csv"
                    },
                    {
                      "key": "has_header",
                      "value": "true",
                      "description": "Whether the CSV file has a header row",
                      "type": "text"
                    },
                    {
                      "key": "override",
                      "value": "true",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/upload",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "upload"]
                },
                "description": "Upload a CSV file and create a table in DuckDB"
              },
              "response": [
                {
                  "name": "CSV file successfully uploaded and table created",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "multipart/form-data"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "table_name",
                          "value": "<string>",
                          "description": "(Required) Name of the table to create",
                          "type": "text"
                        },
                        {
                          "key": "csv_file",
                          "description": "(Required) The CSV file to upload",
                          "type": "file",
                          "src": []
                        },
                        {
                          "key": "has_header",
                          "value": "true",
                          "description": "Whether the CSV file has a header row",
                          "type": "text"
                        }
                      ]
                    },
                    "url": {
                      "raw": "{{baseUrl}}/api/upload",
                      "host": ["{{baseUrl}}"],
                      "path": ["api", "upload"]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"status\": \"<string>\",\n  \"table\": \"<string>\",\n  \"columns\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"row_count\": \"<integer>\"\n}"
                },
                {
                  "name": "Bad request (invalid file format, missing parameters)",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "multipart/form-data"
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "table_name",
                          "value": "<string>",
                          "description": "(Required) Name of the table to create",
                          "type": "text"
                        },
                        {
                          "key": "csv_file",
                          "description": "(Required) The CSV file to upload",
                          "type": "file",
                          "src": []
                        },
                        {
                          "key": "has_header",
                          "value": "true",
                          "description": "Whether the CSV file has a header row",
                          "type": "text"
                        }
                      ]
                    },
                    "url": {
                      "raw": "{{baseUrl}}/api/upload",
                      "host": ["{{baseUrl}}"],
                      "path": ["api", "upload"]
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "text",
                  "header": [],
                  "cookie": [],
                  "body": ""
                },
                {
                  "name": "File too large (max 2GB)",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "multipart/form-data"
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "table_name",
                          "value": "<string>",
                          "description": "(Required) Name of the table to create",
                          "type": "text"
                        },
                        {
                          "key": "csv_file",
                          "description": "(Required) The CSV file to upload",
                          "type": "file",
                          "src": []
                        },
                        {
                          "key": "has_header",
                          "value": "true",
                          "description": "Whether the CSV file has a header row",
                          "type": "text"
                        }
                      ]
                    },
                    "url": {
                      "raw": "{{baseUrl}}/api/upload",
                      "host": ["{{baseUrl}}"],
                      "path": ["api", "upload"]
                    }
                  },
                  "status": "Request Entity Too Large",
                  "code": 413,
                  "_postman_previewlanguage": "text",
                  "header": [],
                  "cookie": [],
                  "body": ""
                },
                {
                  "name": "Internal server error",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "multipart/form-data"
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "table_name",
                          "value": "<string>",
                          "description": "(Required) Name of the table to create",
                          "type": "text"
                        },
                        {
                          "key": "csv_file",
                          "description": "(Required) The CSV file to upload",
                          "type": "file",
                          "src": []
                        },
                        {
                          "key": "has_header",
                          "value": "true",
                          "description": "Whether the CSV file has a header row",
                          "type": "text"
                        }
                      ]
                    },
                    "url": {
                      "raw": "{{baseUrl}}/api/upload",
                      "host": ["{{baseUrl}}"],
                      "path": ["api", "upload"]
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "text",
                  "header": [],
                  "cookie": [],
                  "body": ""
                }
              ]
            }
          ]
        },
        {
          "name": "conf",
          "item": [
            {
              "name": "Get Settings",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"SELECT * FROM duckdb_settings();\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"]
                }
              },
              "response": []
            },
            {
              "name": "Mem limit 100MB",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"SET memory_limit = '100MB';\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"]
                }
              },
              "response": []
            },
            {
              "name": "Select mem limit",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"SELECT current_setting('memory_limit');\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "query",
          "item": [
            {
              "name": "0. Basic SELECT *",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Test overall response structure",
                      "pm.test(\"Response has the expected structure\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   pm.expect(responseJson).to.have.property('columns').that.is.an('array');",
                      "   pm.expect(responseJson).to.have.property('results').that.is.an('array');",
                      "   pm.expect(responseJson).to.have.property('duration_ms').that.is.a('number');",
                      "   pm.expect(responseJson).to.have.property('row_count').that.is.a('number');",
                      "   pm.expect(responseJson).to.have.property('status').that.is.a('string');",
                      "});",
                      "",
                      "// Test status is success",
                      "pm.test(\"Status is success\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   pm.expect(responseJson.status).to.equal('success');",
                      "});",
                      "",
                      "// Test row_count matches results array length",
                      "pm.test(\"row_count matches results array length\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   pm.expect(responseJson.row_count).to.equal(responseJson.results.length);",
                      "});",
                      "",
                      "// Test columns array",
                      "pm.test(\"Columns array contains expected fields\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   const expectedColumns = [\"date_of_birth\", \"diagnosis\", \"email\", \"first_name\", \"income\", \"last_name\", \"medicine\", \"patient_id\"];",
                      "   pm.expect(responseJson.columns).to.have.members(expectedColumns);",
                      "});",
                      "",
                      "// Test results array structure and data types",
                      "pm.test(\"Results array contains objects with correct structure and types\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   pm.expect(responseJson.results).to.be.an('array');",
                      "   ",
                      "   responseJson.results.forEach(item => {",
                      "       // Check all columns exist in each data object",
                      "       responseJson.columns.forEach(column => {",
                      "           pm.expect(item).to.have.property(column);",
                      "       });",
                      "       ",
                      "       // Validate data types",
                      "       pm.expect(item.patient_id).to.be.a('number');",
                      "       pm.expect(item.first_name).to.be.a('string');",
                      "       pm.expect(item.last_name).to.be.a('string');",
                      "       pm.expect(item.email).to.be.a('string');",
                      "       pm.expect(item.date_of_birth).to.be.a('string');",
                      "       pm.expect(item.diagnosis).to.be.a('string');",
                      "       pm.expect(item.medicine).to.be.a('string');",
                      "       if (item.income != null) {",
                      "        pm.expect(item.income).to.be.a('string');",
                      "       }",
                      "   });",
                      "});",
                      "",
                      "// Test email format",
                      "pm.test(\"Email addresses have valid format\", function() {",
                      "   const responseJson = pm.response.json();",
                      "   const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;",
                      "   ",
                      "   responseJson.results.forEach(item => {",
                      "       pm.expect(item.email).to.match(emailRegex);",
                      "   });",
                      "});",
                      "",
                      "// Test date format",
                      "pm.test(\"date_of_birth has valid ISO format\", function() {",
                      "   const responseJson = pm.response.json();",
                      "   const isoDateRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$/;",
                      "   ",
                      "   responseJson.results.forEach(item => {",
                      "       pm.expect(item.date_of_birth).to.match(isoDateRegex);",
                      "   });",
                      "});",
                      "",
                      "// Test income format",
                      "pm.test(\"Income has valid currency format\", function() {",
                      "    const responseJson = pm.response.json();",
                      "    const currencyRegex = /^\\$\\d+\\.\\d{2}$/;",
                      "    ",
                      "    responseJson.results.forEach(item => {",
                      "        if (item.income != null) {",
                      "            pm.expect(item.income).to.match(currencyRegex);",
                      "        }",
                      "    });",
                      "});",
                      "",
                      "// Test data consistency with columns",
                      "pm.test(\"Result keys match columns array\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   ",
                      "   responseJson.results.forEach(item => {",
                      "       const itemKeys = Object.keys(item).sort();",
                      "       pm.expect(itemKeys).to.deep.equal(responseJson.columns.sort());",
                      "   });",
                      "});",
                      "",
                      "// Test patient_ids are unique",
                      "pm.test(\"Patient IDs are unique\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   const patientIds = responseJson.results.map(item => item.patient_id);",
                      "   const uniqueIds = [...new Set(patientIds)];",
                      "   ",
                      "   pm.expect(uniqueIds.length).to.equal(patientIds.length);",
                      "});",
                      "",
                      "// Test duration_ms is within required limits",
                      "pm.test(\"Query execution time is under 10ms\", function() {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.duration_ms).to.be.at.most(10);",
                      "});",
                      "",
                      "// Test HTTP response time is acceptable",
                      "pm.test(\"Response time is less than 15ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(15);",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"SELECT * FROM {{table_name}} LIMIT 10;\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"]
                }
              },
              "response": []
            },
            {
              "name": "1. Basic SELECT with filtering Copy",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Test overall response structure",
                      "pm.test(\"Response has the expected structure\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   pm.expect(responseJson).to.have.property('columns').that.is.an('array');",
                      "   pm.expect(responseJson).to.have.property('results').that.is.an('array');",
                      "   pm.expect(responseJson).to.have.property('duration_ms').that.is.a('number');",
                      "   pm.expect(responseJson).to.have.property('row_count').that.is.a('number');",
                      "   pm.expect(responseJson).to.have.property('status').that.is.a('string');",
                      "});",
                      "",
                      "// Test status is success",
                      "pm.test(\"Status is success\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   pm.expect(responseJson.status).to.equal('success');",
                      "});",
                      "",
                      "// Test row_count matches results array length",
                      "pm.test(\"row_count matches results array length\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   pm.expect(responseJson.row_count).to.equal(responseJson.results.length);",
                      "});",
                      "",
                      "// Test columns array",
                      "pm.test(\"Columns array contains expected fields\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   const expectedColumns = [\"date_of_birth\", \"diagnosis\", \"email\", \"first_name\", \"income\", \"last_name\", \"medicine\", \"patient_id\"];",
                      "   pm.expect(responseJson.columns).to.have.members(expectedColumns);",
                      "});",
                      "",
                      "// Test results array structure and data types",
                      "pm.test(\"Results array contains objects with correct structure and types\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   pm.expect(responseJson.results).to.be.an('array');",
                      "   ",
                      "   responseJson.results.forEach(item => {",
                      "       // Check all columns exist in each data object",
                      "       responseJson.columns.forEach(column => {",
                      "           pm.expect(item).to.have.property(column);",
                      "       });",
                      "       ",
                      "       // Validate data types",
                      "       pm.expect(item.patient_id).to.be.a('number');",
                      "       pm.expect(item.first_name).to.be.a('string');",
                      "       pm.expect(item.last_name).to.be.a('string');",
                      "       pm.expect(item.email).to.be.a('string');",
                      "       pm.expect(item.date_of_birth).to.be.a('string');",
                      "       pm.expect(item.diagnosis).to.be.a('string');",
                      "       pm.expect(item.medicine).to.be.a('string');",
                      "       pm.expect(item.income).to.be.a('string');",
                      "   });",
                      "});",
                      "",
                      "// Test email format",
                      "pm.test(\"Email addresses have valid format\", function() {",
                      "   const responseJson = pm.response.json();",
                      "   const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;",
                      "   ",
                      "   responseJson.results.forEach(item => {",
                      "       pm.expect(item.email).to.match(emailRegex);",
                      "   });",
                      "});",
                      "",
                      "// Test date format",
                      "pm.test(\"date_of_birth has valid ISO format\", function() {",
                      "   const responseJson = pm.response.json();",
                      "   const isoDateRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$/;",
                      "   ",
                      "   responseJson.results.forEach(item => {",
                      "       pm.expect(item.date_of_birth).to.match(isoDateRegex);",
                      "   });",
                      "});",
                      "",
                      "// Test income format",
                      "pm.test(\"Income has valid currency format\", function() {",
                      "    const responseJson = pm.response.json();",
                      "    const currencyRegex = /^\\$\\d+\\.\\d{2}$/;",
                      "    ",
                      "    responseJson.results.forEach(item => {",
                      "        pm.expect(item.income).to.match(currencyRegex);",
                      "    });",
                      "});",
                      "",
                      "// Test data consistency with columns",
                      "pm.test(\"Result keys match columns array\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   ",
                      "   responseJson.results.forEach(item => {",
                      "       const itemKeys = Object.keys(item).sort();",
                      "       pm.expect(itemKeys).to.deep.equal(responseJson.columns.sort());",
                      "   });",
                      "});",
                      "",
                      "// Test patient_ids are unique",
                      "pm.test(\"Patient IDs are unique\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   const patientIds = responseJson.results.map(item => item.patient_id);",
                      "   const uniqueIds = [...new Set(patientIds)];",
                      "   ",
                      "   pm.expect(uniqueIds.length).to.equal(patientIds.length);",
                      "});",
                      "",
                      "// Test duration_ms is within required limits",
                      "pm.test(\"Query execution time is under 10ms\", function() {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.duration_ms).to.be.at.most(10);",
                      "});",
                      "",
                      "// Test HTTP response time is acceptable",
                      "pm.test(\"Response time is less than 15ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(15);",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"SELECT * FROM {{table_name}} WHERE diagnosis = 'H7013' LIMIT 10;\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"]
                }
              },
              "response": []
            },
            {
              "name": "2. Aggregation: Count patients by diagnosis",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Test overall response structure",
                      "pm.test(\"Response has the expected structure\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   pm.expect(responseJson).to.have.property('columns').that.is.an('array');",
                      "   pm.expect(responseJson).to.have.property('results').that.is.an('array');",
                      "   pm.expect(responseJson).to.have.property('duration_ms').that.is.a('number');",
                      "   pm.expect(responseJson).to.have.property('row_count').that.is.a('number');",
                      "   pm.expect(responseJson).to.have.property('status').that.is.a('string');",
                      "});",
                      "",
                      "// Test status is success",
                      "pm.test(\"Status is success\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   pm.expect(responseJson.status).to.equal('success');",
                      "});",
                      "",
                      "// Test row_count matches results array length",
                      "pm.test(\"row_count matches results array length\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   pm.expect(responseJson.row_count).to.equal(responseJson.results.length);",
                      "});",
                      "",
                      "// Test columns array",
                      "pm.test(\"Columns array contains expected fields\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   const expectedColumns = [\"diagnosis\", \"patient_count\"];",
                      "   pm.expect(responseJson.columns).to.have.members(expectedColumns);",
                      "});",
                      "",
                      "// Test results array structure and data types",
                      "pm.test(\"Results array contains objects with correct structure and types\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   pm.expect(responseJson.results).to.be.an('array');",
                      "   ",
                      "   responseJson.results.forEach(item => {",
                      "       // Check all columns exist in each data object",
                      "       responseJson.columns.forEach(column => {",
                      "           pm.expect(item).to.have.property(column);",
                      "       });",
                      "       ",
                      "       // Validate data types",
                      "       pm.expect(item.diagnosis).to.be.a('string');",
                      "       pm.expect(item.patient_count).to.be.a('number');",
                      "   });",
                      "});",
                      "",
                      "// Test data consistency with columns",
                      "pm.test(\"Result keys match columns array\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   ",
                      "   responseJson.results.forEach(item => {",
                      "       const itemKeys = Object.keys(item).sort();",
                      "       pm.expect(itemKeys).to.deep.equal(responseJson.columns.sort());",
                      "   });",
                      "});",
                      "",
                      "// Test patient_count values are valid",
                      "pm.test(\"patient_count values are positive integers\", function() {",
                      "   const responseJson = pm.response.json();",
                      "   ",
                      "   responseJson.results.forEach(item => {",
                      "       pm.expect(item.patient_count).to.be.at.least(1);",
                      "       pm.expect(Number.isInteger(item.patient_count)).to.be.true;",
                      "   });",
                      "});",
                      "",
                      "// Test diagnoses are unique",
                      "pm.test(\"Diagnoses are unique\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   const diagnoses = responseJson.results.map(item => item.diagnosis);",
                      "   const uniqueDiagnoses = [...new Set(diagnoses)];",
                      "   ",
                      "   pm.expect(uniqueDiagnoses.length).to.equal(diagnoses.length);",
                      "});",
                      "",
                      "// Test duration_ms is within required limits",
                      "pm.test(\"Query execution time is under 10ms\", function() {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.duration_ms).to.be.at.most(10);",
                      "});",
                      "",
                      "// Test HTTP response time is acceptable",
                      "pm.test(\"Response time is less than 15ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(15);",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"SELECT diagnosis, COUNT(*) as patient_count FROM {{table_name}} GROUP BY diagnosis ORDER BY patient_count DESC LIMIT 10;\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query?benchmark=true",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"],
                  "query": [
                    {
                      "key": "benchmark",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "3. Filter by date range",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Test overall response structure",
                      "pm.test(\"Response has the expected structure\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   pm.expect(responseJson).to.have.property('columns').that.is.an('array');",
                      "   pm.expect(responseJson).to.have.property('results').that.is.an('array');",
                      "   pm.expect(responseJson).to.have.property('duration_ms').that.is.a('number');",
                      "   pm.expect(responseJson).to.have.property('row_count').that.is.a('number');",
                      "   pm.expect(responseJson).to.have.property('status').that.is.a('string');",
                      "});",
                      "",
                      "// Test status is success",
                      "pm.test(\"Status is success\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   pm.expect(responseJson.status).to.equal('success');",
                      "});",
                      "",
                      "// Test row_count matches results array length",
                      "pm.test(\"row_count matches results array length\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   pm.expect(responseJson.row_count).to.equal(responseJson.results.length);",
                      "});",
                      "",
                      "// Test columns array",
                      "pm.test(\"Columns array contains expected fields\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   const expectedColumns = [\"date_of_birth\", \"first_name\", \"last_name\", \"patient_id\"];",
                      "   pm.expect(responseJson.columns).to.have.members(expectedColumns);",
                      "});",
                      "",
                      "// Test results array structure and data types",
                      "pm.test(\"Results array contains objects with correct structure and types\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   pm.expect(responseJson.results).to.be.an('array');",
                      "   ",
                      "   responseJson.results.forEach(item => {",
                      "       // Check all columns exist in each data object",
                      "       responseJson.columns.forEach(column => {",
                      "           pm.expect(item).to.have.property(column);",
                      "       });",
                      "       ",
                      "       // Validate data types",
                      "       pm.expect(item.patient_id).to.be.a('number');",
                      "       pm.expect(item.first_name).to.be.a('string');",
                      "       pm.expect(item.last_name).to.be.a('string');",
                      "       pm.expect(item.date_of_birth).to.be.a('string');",
                      "   });",
                      "});",
                      "",
                      "// Test date format",
                      "pm.test(\"date_of_birth has valid ISO format\", function() {",
                      "   const responseJson = pm.response.json();",
                      "   const isoDateRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$/;",
                      "   ",
                      "   responseJson.results.forEach(item => {",
                      "       pm.expect(item.date_of_birth).to.match(isoDateRegex);",
                      "   });",
                      "});",
                      "",
                      "// Test all dates are in December 2023",
                      "pm.test(\"All dates are in December 2023\", function() {",
                      "   const responseJson = pm.response.json();",
                      "   ",
                      "   responseJson.results.forEach(item => {",
                      "       // Extract year and month from date string",
                      "       const date = new Date(item.date_of_birth);",
                      "       const year = date.getUTCFullYear();",
                      "       const month = date.getUTCMonth() + 1; // JavaScript months are 0-indexed",
                      "       ",
                      "       pm.expect(year).to.equal(2023);",
                      "       pm.expect(month).to.equal(12);",
                      "   });",
                      "});",
                      "",
                      "// Test data consistency with columns",
                      "pm.test(\"Result keys match columns array\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   ",
                      "   responseJson.results.forEach(item => {",
                      "       const itemKeys = Object.keys(item).sort();",
                      "       pm.expect(itemKeys).to.deep.equal(responseJson.columns.sort());",
                      "   });",
                      "});",
                      "",
                      "// Test patient_ids are unique",
                      "pm.test(\"Patient IDs are unique\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   const patientIds = responseJson.results.map(item => item.patient_id);",
                      "   const uniqueIds = [...new Set(patientIds)];",
                      "   ",
                      "   pm.expect(uniqueIds.length).to.equal(patientIds.length);",
                      "});",
                      "",
                      "// Test patient_ids are valid",
                      "pm.test(\"patient_ids are positive integers\", function() {",
                      "   const responseJson = pm.response.json();",
                      "   ",
                      "   responseJson.results.forEach(item => {",
                      "       pm.expect(item.patient_id).to.be.at.least(1);",
                      "       pm.expect(Number.isInteger(item.patient_id)).to.be.true;",
                      "   });",
                      "});",
                      "",
                      "// Test names are not empty",
                      "pm.test(\"Names are not empty\", function() {",
                      "   const responseJson = pm.response.json();",
                      "   ",
                      "   responseJson.results.forEach(item => {",
                      "       pm.expect(item.first_name.trim()).to.have.lengthOf.at.least(1);",
                      "       pm.expect(item.last_name.trim()).to.have.lengthOf.at.least(1);",
                      "   });",
                      "});",
                      "",
                      "// Test duration_ms is within required limits",
                      "pm.test(\"Query execution time is under 10ms\", function() {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.duration_ms).to.be.at.most(10);",
                      "});",
                      "",
                      "// Test HTTP response time is acceptable",
                      "pm.test(\"Response time is less than 15ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(15);",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"SELECT patient_id, first_name, last_name, date_of_birth FROM {{table_name}} WHERE date_of_birth BETWEEN '2023-01-01' AND '2023-12-31' LIMIT 10;\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"]
                }
              },
              "response": []
            },
            {
              "name": "4. String pattern matching",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Test overall response structure",
                      "pm.test(\"Response has the expected structure\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   pm.expect(responseJson).to.have.property('columns').that.is.an('array');",
                      "   pm.expect(responseJson).to.have.property('results').that.is.an('array');",
                      "   pm.expect(responseJson).to.have.property('duration_ms').that.is.a('number');",
                      "   pm.expect(responseJson).to.have.property('row_count').that.is.a('number');",
                      "   pm.expect(responseJson).to.have.property('status').that.is.a('string');",
                      "});",
                      "",
                      "// Test status is success",
                      "pm.test(\"Status is success\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   pm.expect(responseJson.status).to.equal('success');",
                      "});",
                      "",
                      "// Test row_count matches results array length",
                      "pm.test(\"row_count matches results array length\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   pm.expect(responseJson.row_count).to.equal(responseJson.results.length);",
                      "});",
                      "",
                      "// Test columns array",
                      "pm.test(\"Columns array contains expected fields\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   const expectedColumns = [\"email\", \"first_name\", \"last_name\", \"patient_id\"];",
                      "   pm.expect(responseJson.columns).to.have.members(expectedColumns);",
                      "});",
                      "",
                      "// Test results array structure and data types",
                      "pm.test(\"Results array contains objects with correct structure and types\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   pm.expect(responseJson.results).to.be.an('array');",
                      "   ",
                      "   responseJson.results.forEach(item => {",
                      "       // Check all columns exist in each data object",
                      "       responseJson.columns.forEach(column => {",
                      "           pm.expect(item).to.have.property(column);",
                      "       });",
                      "       ",
                      "       // Validate data types",
                      "       pm.expect(item.patient_id).to.be.a('number');",
                      "       pm.expect(item.first_name).to.be.a('string');",
                      "       pm.expect(item.last_name).to.be.a('string');",
                      "       pm.expect(item.email).to.be.a('string');",
                      "   });",
                      "});",
                      "",
                      "// Test email format",
                      "pm.test(\"Email addresses have valid format\", function() {",
                      "   const responseJson = pm.response.json();",
                      "   const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;",
                      "   ",
                      "   responseJson.results.forEach(item => {",
                      "       pm.expect(item.email).to.match(emailRegex);",
                      "   });",
                      "});",
                      "",
                      "// Test data consistency with columns",
                      "pm.test(\"Result keys match columns array\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   ",
                      "   responseJson.results.forEach(item => {",
                      "       const itemKeys = Object.keys(item).sort();",
                      "       pm.expect(itemKeys).to.deep.equal(responseJson.columns.sort());",
                      "   });",
                      "});",
                      "",
                      "// Test patient_ids are unique",
                      "pm.test(\"Patient IDs are unique\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   const patientIds = responseJson.results.map(item => item.patient_id);",
                      "   const uniqueIds = [...new Set(patientIds)];",
                      "   ",
                      "   pm.expect(uniqueIds.length).to.equal(patientIds.length);",
                      "});",
                      "",
                      "// Test patient_ids are valid",
                      "pm.test(\"patient_ids are positive integers\", function() {",
                      "   const responseJson = pm.response.json();",
                      "   ",
                      "   responseJson.results.forEach(item => {",
                      "       pm.expect(item.patient_id).to.be.at.least(1);",
                      "       pm.expect(Number.isInteger(item.patient_id)).to.be.true;",
                      "   });",
                      "});",
                      "",
                      "// Test emails are unique",
                      "pm.test(\"Email addresses are unique\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   const emails = responseJson.results.map(item => item.email);",
                      "   const uniqueEmails = [...new Set(emails)];",
                      "   ",
                      "   pm.expect(uniqueEmails.length).to.equal(emails.length);",
                      "});",
                      "",
                      "// Test names are not empty",
                      "pm.test(\"Names are not empty\", function() {",
                      "   const responseJson = pm.response.json();",
                      "   ",
                      "   responseJson.results.forEach(item => {",
                      "       pm.expect(item.first_name.trim()).to.have.lengthOf.at.least(1);",
                      "       pm.expect(item.last_name.trim()).to.have.lengthOf.at.least(1);",
                      "   });",
                      "});",
                      "",
                      "// Test emails contain domain names",
                      "pm.test(\"Email addresses contain common domain names\", function() {",
                      "   const responseJson = pm.response.json();",
                      "   const commonDomains = [\".com\", \".org\", \".net\", \".edu\", \".gov\"];",
                      "   ",
                      "   responseJson.results.forEach(item => {",
                      "       const hasDomain = commonDomains.some(domain => item.email.includes(domain));",
                      "       pm.expect(hasDomain).to.be.true;",
                      "   });",
                      "});",
                      "",
                      "// Test duration_ms is within required limits",
                      "pm.test(\"Query execution time is under 10ms\", function() {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.duration_ms).to.be.at.most(10);",
                      "});",
                      "",
                      "// Test HTTP response time is acceptable",
                      "pm.test(\"Response time is less than 15ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(15);",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"SELECT patient_id, first_name, last_name, email FROM {{table_name}} WHERE email LIKE '%.com' LIMIT 10;\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"]
                }
              },
              "response": []
            },
            {
              "name": "5. Numeric operations and formatting",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Test overall response structure",
                      "pm.test(\"Response has the expected structure\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   pm.expect(responseJson).to.have.property('columns').that.is.an('array');",
                      "   pm.expect(responseJson).to.have.property('results').that.is.an('array');",
                      "   pm.expect(responseJson).to.have.property('duration_ms').that.is.a('number');",
                      "   pm.expect(responseJson).to.have.property('row_count').that.is.a('number');",
                      "   pm.expect(responseJson).to.have.property('status').that.is.a('string');",
                      "});",
                      "",
                      "// Test status is success",
                      "pm.test(\"Status is success\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   pm.expect(responseJson.status).to.equal('success');",
                      "});",
                      "",
                      "// Test row_count matches results array length",
                      "pm.test(\"row_count matches results array length\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   pm.expect(responseJson.row_count).to.equal(responseJson.results.length);",
                      "});",
                      "",
                      "// Test columns array",
                      "pm.test(\"Columns array contains expected fields\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   const expectedColumns = [\"first_name\", \"income_numeric\", \"last_name\", \"patient_id\"];",
                      "   pm.expect(responseJson.columns).to.have.members(expectedColumns);",
                      "});",
                      "",
                      "// Test results array structure and data types",
                      "pm.test(\"Results array contains objects with correct structure and types\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   pm.expect(responseJson.results).to.be.an('array');",
                      "   ",
                      "   responseJson.results.forEach(item => {",
                      "       // Check all columns exist in each data object",
                      "       responseJson.columns.forEach(column => {",
                      "           pm.expect(item).to.have.property(column);",
                      "       });",
                      "       ",
                      "       // Validate data types",
                      "       pm.expect(item.patient_id).to.be.a('number');",
                      "       pm.expect(item.first_name).to.be.a('string');",
                      "       pm.expect(item.last_name).to.be.a('string');",
                      "       pm.expect(item.income_numeric).to.be.an('object');",
                      "   });",
                      "});",
                      "",
                      "// Test nested income_numeric object structure",
                      "pm.test(\"income_numeric has the correct nested structure\", function() {",
                      "   const responseJson = pm.response.json();",
                      "   ",
                      "   responseJson.results.forEach(item => {",
                      "       pm.expect(item.income_numeric).to.have.property('Scale').that.is.a('number');",
                      "       pm.expect(item.income_numeric).to.have.property('Value').that.is.a('number');",
                      "       pm.expect(item.income_numeric).to.have.property('Width').that.is.a('number');",
                      "   });",
                      "});",
                      "",
                      "// Test data consistency with columns",
                      "pm.test(\"Result keys match columns array\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   ",
                      "   responseJson.results.forEach(item => {",
                      "       const itemKeys = Object.keys(item).sort();",
                      "       pm.expect(itemKeys).to.deep.equal(responseJson.columns.sort());",
                      "   });",
                      "});",
                      "",
                      "// Test patient_ids are unique",
                      "pm.test(\"Patient IDs are unique\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   const patientIds = responseJson.results.map(item => item.patient_id);",
                      "   const uniqueIds = [...new Set(patientIds)];",
                      "   ",
                      "   pm.expect(uniqueIds.length).to.equal(patientIds.length);",
                      "});",
                      "",
                      "// Test income_numeric values are in descending order",
                      "pm.test(\"Results are sorted by income_numeric Value in descending order\", function() {",
                      "   const responseJson = pm.response.json();",
                      "   const values = responseJson.results.map(item => item.income_numeric.Value);",
                      "   ",
                      "   for (let i = 0; i < values.length - 1; i++) {",
                      "       pm.expect(values[i]).to.be.at.least(values[i+1], ",
                      "           `Expected ${values[i]} to be >= ${values[i+1]}`);",
                      "   }",
                      "});",
                      "",
                      "// Test income_numeric scale and width are consistent",
                      "pm.test(\"income_numeric has consistent Scale and Width values\", function() {",
                      "   const responseJson = pm.response.json();",
                      "   const firstScale = responseJson.results[0].income_numeric.Scale;",
                      "   const firstWidth = responseJson.results[0].income_numeric.Width;",
                      "   ",
                      "   responseJson.results.forEach(item => {",
                      "       pm.expect(item.income_numeric.Scale).to.equal(firstScale);",
                      "       pm.expect(item.income_numeric.Width).to.equal(firstWidth);",
                      "   });",
                      "});",
                      "",
                      "// Test names are not empty",
                      "pm.test(\"Names are not empty\", function() {",
                      "   const responseJson = pm.response.json();",
                      "   ",
                      "   responseJson.results.forEach(item => {",
                      "       pm.expect(item.first_name.trim()).to.have.lengthOf.at.least(1);",
                      "       pm.expect(item.last_name.trim()).to.have.lengthOf.at.least(1);",
                      "   });",
                      "});",
                      "",
                      "// Test duration_ms is within required limits",
                      "pm.test(\"Query execution time is under 10ms\", function() {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.duration_ms).to.be.at.most(10);",
                      "});",
                      "",
                      "// Test HTTP response time is acceptable",
                      "pm.test(\"Response time is less than 15ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(15);",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"SELECT patient_id, first_name, last_name, REPLACE(REPLACE(income, '$', ''), ',', '')::numeric as income_numeric FROM {{table_name}} WHERE REPLACE(REPLACE(income, '$', ''), ',', '')::numeric > 200000 ORDER BY income_numeric DESC LIMIT 10;\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"]
                }
              },
              "response": []
            },
            {
              "name": "6. CASE statements for data categorization",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Test overall response structure",
                      "pm.test(\"Response has the expected structure\", function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('columns').that.is.an('array');",
                      "    pm.expect(responseJson).to.have.property('results').that.is.an('array');",
                      "    pm.expect(responseJson).to.have.property('duration_ms').that.is.a('number');",
                      "    pm.expect(responseJson).to.have.property('row_count').that.is.a('number');",
                      "    pm.expect(responseJson).to.have.property('status').that.is.a('string');",
                      "});",
                      "",
                      "// Test status is success",
                      "pm.test(\"Status is success\", function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.status).to.equal('success');",
                      "});",
                      "",
                      "// Test row_count matches results array length",
                      "pm.test(\"row_count matches results array length\", function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.row_count).to.equal(responseJson.results.length);",
                      "});",
                      "",
                      "// Test columns array",
                      "pm.test(\"Columns array contains expected fields\", function () {",
                      "    const responseJson = pm.response.json();",
                      "    const expectedColumns = [\"first_name\", \"income_category\", \"last_name\", \"patient_id\"];",
                      "    pm.expect(responseJson.columns).to.have.members(expectedColumns);",
                      "});",
                      "",
                      "// Test results array structure and data types",
                      "pm.test(\"Results array contains objects with correct structure and types\", function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.results).to.be.an('array');",
                      "    ",
                      "    responseJson.results.forEach(item => {",
                      "        // Check all columns exist in each data object",
                      "        responseJson.columns.forEach(column => {",
                      "            pm.expect(item).to.have.property(column);",
                      "        });",
                      "        ",
                      "        // Validate data types",
                      "        pm.expect(item.patient_id).to.be.a('number');",
                      "        pm.expect(item.first_name).to.be.a('string');",
                      "        pm.expect(item.last_name).to.be.a('string');",
                      "        pm.expect(item.income_category).to.be.a('string');",
                      "    });",
                      "});",
                      "",
                      "// Test income categories are valid",
                      "pm.test(\"Income categories are valid\", function() {",
                      "    const responseJson = pm.response.json();",
                      "    const validCategories = [\"High Income\", \"Medium Income\", \"Low Income\"];",
                      "    ",
                      "    responseJson.results.forEach(item => {",
                      "        pm.expect(validCategories).to.include(item.income_category);",
                      "    });",
                      "});",
                      "",
                      "// Test data consistency with columns",
                      "pm.test(\"Result keys match columns array\", function () {",
                      "    const responseJson = pm.response.json();",
                      "    ",
                      "    responseJson.results.forEach(item => {",
                      "        const itemKeys = Object.keys(item).sort();",
                      "        pm.expect(itemKeys).to.deep.equal(responseJson.columns.sort());",
                      "    });",
                      "});",
                      "",
                      "// Test patient_ids are unique",
                      "pm.test(\"Patient IDs are unique\", function () {",
                      "    const responseJson = pm.response.json();",
                      "    const patientIds = responseJson.results.map(item => item.patient_id);",
                      "    const uniqueIds = [...new Set(patientIds)];",
                      "    ",
                      "    pm.expect(uniqueIds.length).to.equal(patientIds.length);",
                      "});",
                      "",
                      "// Test patient_ids are valid",
                      "pm.test(\"patient_ids are positive integers\", function() {",
                      "    const responseJson = pm.response.json();",
                      "    ",
                      "    responseJson.results.forEach(item => {",
                      "        pm.expect(item.patient_id).to.be.at.least(1);",
                      "        pm.expect(Number.isInteger(item.patient_id)).to.be.true;",
                      "    });",
                      "});",
                      "",
                      "// Test names are not empty",
                      "pm.test(\"Names are not empty\", function() {",
                      "    const responseJson = pm.response.json();",
                      "    ",
                      "    responseJson.results.forEach(item => {",
                      "        pm.expect(item.first_name.trim()).to.have.lengthOf.at.least(1);",
                      "        pm.expect(item.last_name.trim()).to.have.lengthOf.at.least(1);",
                      "    });",
                      "});",
                      "",
                      "// Test distribution of income categories",
                      "pm.test(\"All income categories are present in the results\", function() {",
                      "    const responseJson = pm.response.json();",
                      "    const incomeCategories = responseJson.results.map(item => item.income_category);",
                      "    const uniqueCategories = [...new Set(incomeCategories)];",
                      "    ",
                      "    pm.expect(uniqueCategories).to.include(\"High Income\");",
                      "    pm.expect(uniqueCategories).to.include(\"Medium Income\");",
                      "    pm.expect(uniqueCategories).to.include(\"Low Income\");",
                      "});",
                      "",
                      "// Test duration_ms is within required limits",
                      "pm.test(\"Query execution time is under 10ms\", function() {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.duration_ms).to.be.at.most(10);",
                      "});",
                      "",
                      "// Test HTTP response time is acceptable",
                      "pm.test(\"Response time is less than 15ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(15);",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"SELECT patient_id, first_name, last_name, CASE WHEN REPLACE(REPLACE(income, '$', ''), ',', '')::numeric > 150000 THEN 'High Income' WHEN REPLACE(REPLACE(income, '$', ''), ',', '')::numeric > 100000 THEN 'Medium Income' ELSE 'Low Income' END AS income_category FROM {{table_name}} LIMIT 20;\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"]
                }
              },
              "response": []
            },
            {
              "name": "7. Aggregation with HAVING clause",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Test overall response structure",
                      "pm.test(\"Response has the expected structure\", function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('columns').that.is.an('array');",
                      "    pm.expect(responseJson).to.have.property('results').that.is.an('array');",
                      "    pm.expect(responseJson).to.have.property('duration_ms').that.is.a('number');",
                      "    pm.expect(responseJson).to.have.property('row_count').that.is.a('number');",
                      "    pm.expect(responseJson).to.have.property('status').that.is.a('string');",
                      "});",
                      "",
                      "// Test status is success",
                      "pm.test(\"Status is success\", function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.status).to.equal('success');",
                      "});",
                      "",
                      "// Test row_count matches results array length",
                      "pm.test(\"row_count matches results array length\", function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.row_count).to.equal(responseJson.results.length);",
                      "});",
                      "",
                      "// Test columns array",
                      "pm.test(\"Columns array contains expected fields\", function () {",
                      "    const responseJson = pm.response.json();",
                      "    const expectedColumns = [\"medicine\", \"usage_count\"];",
                      "    pm.expect(responseJson.columns).to.have.members(expectedColumns);",
                      "});",
                      "",
                      "// Test results array structure and data types",
                      "pm.test(\"Results array contains objects with correct structure and types\", function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.results).to.be.an('array');",
                      "    ",
                      "    responseJson.results.forEach(item => {",
                      "        // Check all columns exist in each data object",
                      "        responseJson.columns.forEach(column => {",
                      "            pm.expect(item).to.have.property(column);",
                      "        });",
                      "        ",
                      "        // Validate data types",
                      "        pm.expect(item.medicine).to.be.a('string');",
                      "        pm.expect(item.usage_count).to.be.a('number');",
                      "    });",
                      "});",
                      "",
                      "// Test usage_count values are positive integers",
                      "pm.test(\"usage_count values are positive integers greater than 5\", function() {",
                      "    const responseJson = pm.response.json();",
                      "    ",
                      "    responseJson.results.forEach(item => {",
                      "        pm.expect(item.usage_count).to.be.at.least(6); // Based on HAVING COUNT(*) > 5",
                      "        pm.expect(Number.isInteger(item.usage_count)).to.be.true;",
                      "    });",
                      "});",
                      "",
                      "// Test medicines are unique",
                      "pm.test(\"Medicines are unique\", function () {",
                      "    const responseJson = pm.response.json();",
                      "    const medicines = responseJson.results.map(item => item.medicine);",
                      "    const uniqueMedicines = [...new Set(medicines)];",
                      "    ",
                      "    pm.expect(uniqueMedicines.length).to.equal(medicines.length);",
                      "});",
                      "",
                      "// Test data consistency with columns",
                      "pm.test(\"Result keys match columns array\", function () {",
                      "    const responseJson = pm.response.json();",
                      "    ",
                      "    responseJson.results.forEach(item => {",
                      "        const itemKeys = Object.keys(item).sort();",
                      "        pm.expect(itemKeys).to.deep.equal(responseJson.columns.sort());",
                      "    });",
                      "});",
                      "",
                      "// Test results are sorted by usage_count in descending order",
                      "pm.test(\"Results are sorted by usage_count in descending order\", function() {",
                      "    const responseJson = pm.response.json();",
                      "    const counts = responseJson.results.map(item => item.usage_count);",
                      "    ",
                      "    for (let i = 0; i < counts.length - 1; i++) {",
                      "        pm.expect(counts[i]).to.be.at.least(counts[i+1], ",
                      "            `Expected ${counts[i]} to be >= ${counts[i+1]}`);",
                      "    }",
                      "});",
                      "",
                      "// Test medicine names are not empty",
                      "pm.test(\"Medicine names are not empty\", function() {",
                      "    const responseJson = pm.response.json();",
                      "    ",
                      "    responseJson.results.forEach(item => {",
                      "        pm.expect(item.medicine.trim()).to.have.lengthOf.at.least(1);",
                      "    });",
                      "});",
                      "",
                      "// Test duration_ms is a reasonable value",
                      "pm.test(\"Query execution time is reasonable\", function() {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.duration_ms).to.be.at.most(10); // 10ms",
                      "});",
                      "",
                      "// Test HTTP response time is acceptable",
                      "pm.test(\"Response time is less than 15ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(15);",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"SELECT medicine, COUNT(*) as usage_count FROM {{table_name}} GROUP BY medicine HAVING COUNT(*) > 5 ORDER BY usage_count DESC;\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"]
                }
              },
              "response": []
            },
            {
              "name": "8. Subquery for filtering",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Test overall response structure",
                      "pm.test(\"Response has the expected structure\", function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('columns').that.is.an('array');",
                      "    pm.expect(responseJson).to.have.property('results').that.is.an('array');",
                      "    pm.expect(responseJson).to.have.property('duration_ms').that.is.a('number');",
                      "    pm.expect(responseJson).to.have.property('row_count').that.is.a('number');",
                      "    pm.expect(responseJson).to.have.property('status').that.is.a('string');",
                      "});",
                      "",
                      "// Test status is success",
                      "pm.test(\"Status is success\", function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.status).to.equal('success');",
                      "});",
                      "",
                      "// Test row_count matches results array length",
                      "pm.test(\"row_count matches results array length\", function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.row_count).to.equal(responseJson.results.length);",
                      "});",
                      "",
                      "// Test columns array",
                      "pm.test(\"Columns array contains expected fields\", function () {",
                      "    const responseJson = pm.response.json();",
                      "    const expectedColumns = [\"first_name\", \"income\", \"last_name\", \"patient_id\"];",
                      "    pm.expect(responseJson.columns).to.have.members(expectedColumns);",
                      "});",
                      "",
                      "// Test results array structure and data types",
                      "pm.test(\"Results array contains objects with correct structure and types\", function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.results).to.be.an('array');",
                      "    ",
                      "    responseJson.results.forEach(item => {",
                      "        // Check all columns exist in each data object",
                      "        responseJson.columns.forEach(column => {",
                      "            pm.expect(item).to.have.property(column);",
                      "        });",
                      "        ",
                      "        // Validate data types",
                      "        pm.expect(item.patient_id).to.be.a('number');",
                      "        pm.expect(item.first_name).to.be.a('string');",
                      "        pm.expect(item.last_name).to.be.a('string');",
                      "        pm.expect(item.income).to.be.a('string');",
                      "    });",
                      "});",
                      "",
                      "// Test income format",
                      "pm.test(\"Income has valid currency format\", function() {",
                      "    const responseJson = pm.response.json();",
                      "    const currencyRegex = /^\\$\\d{1,3}(,\\d{3})*\\.\\d{2}$/;",
                      "    ",
                      "    responseJson.results.forEach(item => {",
                      "        // This allows for both formats: $399,799.88 or $399799.88",
                      "        const sanitizedIncome = item.income.replace(/,/g, '');",
                      "        const formattedRegex = /^\\$\\d+\\.\\d{2}$/;",
                      "        pm.expect(sanitizedIncome).to.match(formattedRegex);",
                      "    });",
                      "});",
                      "",
                      "// Test data consistency with columns",
                      "pm.test(\"Result keys match columns array\", function () {",
                      "    const responseJson = pm.response.json();",
                      "    ",
                      "    responseJson.results.forEach(item => {",
                      "        const itemKeys = Object.keys(item).sort();",
                      "        pm.expect(itemKeys).to.deep.equal(responseJson.columns.sort());",
                      "    });",
                      "});",
                      "",
                      "// Test patient_ids are unique",
                      "pm.test(\"Patient IDs are unique\", function () {",
                      "    const responseJson = pm.response.json();",
                      "    const patientIds = responseJson.results.map(item => item.patient_id);",
                      "    const uniqueIds = [...new Set(patientIds)];",
                      "    ",
                      "    pm.expect(uniqueIds.length).to.equal(patientIds.length);",
                      "});",
                      "",
                      "// Test patient_ids are valid",
                      "pm.test(\"patient_ids are positive integers\", function() {",
                      "    const responseJson = pm.response.json();",
                      "    ",
                      "    responseJson.results.forEach(item => {",
                      "        pm.expect(item.patient_id).to.be.at.least(1);",
                      "        pm.expect(Number.isInteger(item.patient_id)).to.be.true;",
                      "    });",
                      "});",
                      "",
                      "// Test names are not empty",
                      "pm.test(\"Names are not empty\", function() {",
                      "    const responseJson = pm.response.json();",
                      "    ",
                      "    responseJson.results.forEach(item => {",
                      "        pm.expect(item.first_name.trim()).to.have.lengthOf.at.least(1);",
                      "        pm.expect(item.last_name.trim()).to.have.lengthOf.at.least(1);",
                      "    });",
                      "});",
                      "",
                      "// Test income values are in descending order",
                      "pm.test(\"Results are sorted by income in descending order\", function() {",
                      "    const responseJson = pm.response.json();",
                      "    const incomeValues = responseJson.results.map(item => {",
                      "        // Extract numeric value from income string",
                      "        return parseFloat(item.income.replace('$', '').replace(',', ''));",
                      "    });",
                      "    ",
                      "    for (let i = 0; i < incomeValues.length - 1; i++) {",
                      "        pm.expect(incomeValues[i]).to.be.at.least(incomeValues[i+1], ",
                      "            `Expected ${incomeValues[i]} to be >= ${incomeValues[i+1]}`);",
                      "    }",
                      "});",
                      "",
                      "// Test duration_ms is a reasonable value",
                      "pm.test(\"Query execution time is reasonable\", function() {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.duration_ms).to.be.at.most(10); // 10ms max",
                      "});",
                      "",
                      "// Test HTTP response time is acceptable",
                      "pm.test(\"Response time is less than 15ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(15);",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"SELECT patient_id, first_name, last_name, income FROM {{table_name}} WHERE REPLACE(REPLACE(income, '$', ''), ',', '')::numeric > (SELECT AVG(REPLACE(REPLACE(income, '$', ''), ',', '')::numeric) FROM {{table_name}}) ORDER BY REPLACE(REPLACE(income, '$', ''), ',', '')::numeric DESC LIMIT 10;\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"]
                }
              },
              "response": []
            },
            {
              "name": "9. Window functions",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Test overall response structure",
                      "pm.test(\"Response has the expected structure\", function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('columns').that.is.an('array');",
                      "    pm.expect(responseJson).to.have.property('results').that.is.an('array');",
                      "    pm.expect(responseJson).to.have.property('duration_ms').that.is.a('number');",
                      "    pm.expect(responseJson).to.have.property('row_count').that.is.a('number');",
                      "    pm.expect(responseJson).to.have.property('status').that.is.a('string');",
                      "});",
                      "",
                      "// Test status is success",
                      "pm.test(\"Status is success\", function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.status).to.equal('success');",
                      "});",
                      "",
                      "// Test row_count matches results array length",
                      "pm.test(\"row_count matches results array length\", function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.row_count).to.equal(responseJson.results.length);",
                      "});",
                      "",
                      "// Test columns array",
                      "pm.test(\"Columns array contains expected fields\", function () {",
                      "    const responseJson = pm.response.json();",
                      "    const expectedColumns = [\"diagnosis\", \"first_name\", \"income_numeric\", \"income_rank_in_diagnosis\", \"last_name\", \"patient_id\"];",
                      "    pm.expect(responseJson.columns).to.have.members(expectedColumns);",
                      "});",
                      "",
                      "// Test results array structure and data types",
                      "pm.test(\"Results array contains objects with correct structure and types\", function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.results).to.be.an('array');",
                      "    ",
                      "    responseJson.results.forEach(item => {",
                      "        // Check all columns exist in each data object",
                      "        responseJson.columns.forEach(column => {",
                      "            pm.expect(item).to.have.property(column);",
                      "        });",
                      "        ",
                      "        // Validate data types",
                      "        pm.expect(item.patient_id).to.be.a('number');",
                      "        pm.expect(item.first_name).to.be.a('string');",
                      "        pm.expect(item.last_name).to.be.a('string');",
                      "        pm.expect(item.diagnosis).to.be.a('string');",
                      "        ",
                      "        // income_numeric can be null in some cases",
                      "        if (item.income_numeric !== null) {",
                      "            pm.expect(item.income_numeric).to.be.an('object');",
                      "        }",
                      "        ",
                      "        pm.expect(item.income_rank_in_diagnosis).to.be.a('number');",
                      "    });",
                      "});",
                      "",
                      "// Test nested income_numeric object structure",
                      "pm.test(\"income_numeric has the correct nested structure when not null\", function() {",
                      "    const responseJson = pm.response.json();",
                      "    ",
                      "    responseJson.results.forEach(item => {",
                      "        if (item.income_numeric !== null) {",
                      "            pm.expect(item.income_numeric).to.have.property('Scale').that.is.a('number');",
                      "            pm.expect(item.income_numeric).to.have.property('Value').that.is.a('number');",
                      "            pm.expect(item.income_numeric).to.have.property('Width').that.is.a('number');",
                      "        }",
                      "    });",
                      "});",
                      "",
                      "// Test data consistency with columns",
                      "pm.test(\"Result keys match columns array\", function () {",
                      "    const responseJson = pm.response.json();",
                      "    ",
                      "    responseJson.results.forEach(item => {",
                      "        const itemKeys = Object.keys(item).sort();",
                      "        pm.expect(itemKeys).to.deep.equal(responseJson.columns.sort());",
                      "    });",
                      "});",
                      "",
                      "// Test patient_ids are unique",
                      "pm.test(\"Patient IDs are unique\", function () {",
                      "    const responseJson = pm.response.json();",
                      "    const patientIds = responseJson.results.map(item => item.patient_id);",
                      "    const uniqueIds = [...new Set(patientIds)];",
                      "    ",
                      "    pm.expect(uniqueIds.length).to.equal(patientIds.length);",
                      "});",
                      "",
                      "// Test income_rank_in_diagnosis values are all 1",
                      "pm.test(\"All income_rank_in_diagnosis values are 1\", function() {",
                      "    const responseJson = pm.response.json();",
                      "    ",
                      "    responseJson.results.forEach(item => {",
                      "        pm.expect(item.income_rank_in_diagnosis).to.equal(1);",
                      "    });",
                      "});",
                      "",
                      "// Test diagnoses are unique",
                      "pm.test(\"Diagnoses are unique\", function () {",
                      "    const responseJson = pm.response.json();",
                      "    const diagnoses = responseJson.results.map(item => item.diagnosis);",
                      "    const uniqueDiagnoses = [...new Set(diagnoses)];",
                      "    ",
                      "    pm.expect(uniqueDiagnoses.length).to.equal(diagnoses.length);",
                      "});",
                      "",
                      "// Test names are not empty",
                      "pm.test(\"Names are not empty\", function() {",
                      "    const responseJson = pm.response.json();",
                      "    ",
                      "    responseJson.results.forEach(item => {",
                      "        pm.expect(item.first_name.trim()).to.have.lengthOf.at.least(1);",
                      "        pm.expect(item.last_name.trim()).to.have.lengthOf.at.least(1);",
                      "    });",
                      "});",
                      "",
                      "// Test duration_ms is within required limits",
                      "pm.test(\"Query execution time is under 10ms\", function() {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.duration_ms).to.be.at.most(10);",
                      "});",
                      "",
                      "// Test HTTP response time is acceptable",
                      "pm.test(\"Response time is less than 15ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(15);",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"SELECT patient_id, first_name, last_name, diagnosis, REPLACE(REPLACE(income, '$', ''), ',', '')::numeric as income_numeric, ROW_NUMBER() OVER (PARTITION BY diagnosis ORDER BY REPLACE(REPLACE(income, '$', ''), ',', '')::numeric DESC) as income_rank_in_diagnosis FROM {{table_name}} LIMIT 20;\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"]
                }
              },
              "response": []
            },
            {
              "name": "10. Common Table Expression for data preprocessing",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Test overall response structure",
                      "pm.test(\"Response has the expected structure\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   pm.expect(responseJson).to.have.property('columns').that.is.an('array');",
                      "   pm.expect(responseJson).to.have.property('results').that.is.an('array');",
                      "   pm.expect(responseJson).to.have.property('duration_ms').that.is.a('number');",
                      "   pm.expect(responseJson).to.have.property('row_count').that.is.a('number');",
                      "   pm.expect(responseJson).to.have.property('status').that.is.a('string');",
                      "});",
                      "",
                      "// Test status is success",
                      "pm.test(\"Status is success\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   pm.expect(responseJson.status).to.equal('success');",
                      "});",
                      "",
                      "// Test row_count matches results array length",
                      "pm.test(\"row_count matches results array length\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   pm.expect(responseJson.row_count).to.equal(responseJson.results.length);",
                      "});",
                      "",
                      "// Test columns array",
                      "pm.test(\"Columns array contains expected fields\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   const expectedColumns = [\"age\", \"diagnosis\", \"full_name\", \"income_numeric\", \"medicine\"];",
                      "   pm.expect(responseJson.columns).to.have.members(expectedColumns);",
                      "});",
                      "",
                      "// Test results array structure and data types",
                      "pm.test(\"Results array contains objects with correct structure and types\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   pm.expect(responseJson.results).to.be.an('array');",
                      "   ",
                      "   responseJson.results.forEach(item => {",
                      "       // Check all columns exist in each data object",
                      "       responseJson.columns.forEach(column => {",
                      "           pm.expect(item).to.have.property(column);",
                      "       });",
                      "       ",
                      "       // Validate data types",
                      "       pm.expect(item.age).to.be.a('number');",
                      "       pm.expect(item.diagnosis).to.be.a('string');",
                      "       pm.expect(item.full_name).to.be.a('string');",
                      "       pm.expect(item.income_numeric).to.be.an('object');",
                      "       pm.expect(item.medicine).to.be.a('string');",
                      "   });",
                      "});",
                      "",
                      "// Test nested income_numeric object structure",
                      "pm.test(\"income_numeric has the correct nested structure\", function() {",
                      "   const responseJson = pm.response.json();",
                      "   ",
                      "   responseJson.results.forEach(item => {",
                      "       pm.expect(item.income_numeric).to.have.property('Scale').that.is.a('number');",
                      "       pm.expect(item.income_numeric).to.have.property('Value').that.is.a('number');",
                      "       pm.expect(item.income_numeric).to.have.property('Width').that.is.a('number');",
                      "   });",
                      "});",
                      "",
                      "// Test data consistency with columns",
                      "pm.test(\"Result keys match columns array\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   ",
                      "   responseJson.results.forEach(item => {",
                      "       const itemKeys = Object.keys(item).sort();",
                      "       pm.expect(itemKeys).to.deep.equal(responseJson.columns.sort());",
                      "   });",
                      "});",
                      "",
                      "// Test income_numeric values are in descending order",
                      "pm.test(\"Results are sorted by income_numeric Value in descending order\", function() {",
                      "   const responseJson = pm.response.json();",
                      "   const values = responseJson.results.map(item => item.income_numeric.Value);",
                      "   ",
                      "   for (let i = 0; i < values.length - 1; i++) {",
                      "       pm.expect(values[i]).to.be.at.least(values[i+1], ",
                      "           `Expected ${values[i]} to be >= ${values[i+1]}`);",
                      "   }",
                      "});",
                      "",
                      "// Test duration_ms is within required limits",
                      "pm.test(\"Query execution time is under 10ms\", function() {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.duration_ms).to.be.at.most(10);",
                      "});",
                      "",
                      "// Test HTTP response time is acceptable",
                      "pm.test(\"Response time is less than 15ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(15);",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"WITH parsed_data AS (SELECT patient_id, first_name || ' ' || last_name as full_name, REPLACE(REPLACE(income, '$', ''), ',', '')::numeric as income_numeric, diagnosis, medicine, CAST(date_of_birth AS DATE) as birth_date FROM {{table_name}}) SELECT full_name, diagnosis, medicine, income_numeric, (YEAR(CURRENT_DATE) - YEAR(birth_date)) as age FROM parsed_data WHERE income_numeric > 150000 ORDER BY income_numeric DESC LIMIT 10;\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "query - ETL and Data Analysis",
          "item": [
            {
              "name": "1. Create dim_patients Table",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"DROP TABLE IF EXISTS dim_patients; CREATE TABLE dim_patients AS SELECT patient_id, first_name, last_name, email, CAST(date_of_birth AS DATE) AS date_of_birth, REPLACE(REPLACE(income, '$', ''), ',', '')::DECIMAL(18,2) AS income_amount, CASE WHEN REPLACE(REPLACE(income, '$', ''), ',', '')::DECIMAL(18,2) > 150000 THEN 'High Income' WHEN REPLACE(REPLACE(income, '$', ''), ',', '')::DECIMAL(18,2) > 100000 THEN 'Medium Income' ELSE 'Low Income' END AS income_category, YEAR(CURRENT_DATE) - YEAR(CAST(date_of_birth AS DATE)) AS age, CASE WHEN YEAR(CURRENT_DATE) - YEAR(CAST(date_of_birth AS DATE)) < 18 THEN 'Under 18' WHEN YEAR(CURRENT_DATE) - YEAR(CAST(date_of_birth AS DATE)) BETWEEN 18 AND 35 THEN '18-35' WHEN YEAR(CURRENT_DATE) - YEAR(CAST(date_of_birth AS DATE)) BETWEEN 36 AND 50 THEN '36-50' WHEN YEAR(CURRENT_DATE) - YEAR(CAST(date_of_birth AS DATE)) BETWEEN 51 AND 65 THEN '51-65' ELSE 'Over 65' END AS age_group FROM patient_data;\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query?benchmark=true",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"],
                  "query": [
                    {
                      "key": "benchmark",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "2. Create dim_diagnoses Table",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"DROP TABLE IF EXISTS dim_diagnoses; CREATE TABLE dim_diagnoses AS SELECT DISTINCT diagnosis AS diagnosis_code, SUBSTRING(diagnosis, 1, 1) AS diagnosis_category, CASE WHEN diagnosis LIKE 'A%' THEN 'Infectious diseases' WHEN diagnosis LIKE 'B%' THEN 'Infectious diseases' WHEN diagnosis LIKE 'C%' THEN 'Neoplasms' WHEN diagnosis LIKE 'D%' THEN 'Blood diseases' WHEN diagnosis LIKE 'E%' THEN 'Endocrine diseases' WHEN diagnosis LIKE 'F%' THEN 'Mental disorders' WHEN diagnosis LIKE 'G%' THEN 'Nervous system diseases' WHEN diagnosis LIKE 'H%' THEN 'Eye and ear diseases' WHEN diagnosis LIKE 'I%' THEN 'Circulatory system diseases' WHEN diagnosis LIKE 'J%' THEN 'Respiratory system diseases' WHEN diagnosis LIKE 'K%' THEN 'Digestive system diseases' WHEN diagnosis LIKE 'L%' THEN 'Skin diseases' WHEN diagnosis LIKE 'M%' THEN 'Musculoskeletal system diseases' WHEN diagnosis LIKE 'N%' THEN 'Genitourinary system diseases' WHEN diagnosis LIKE 'O%' THEN 'Pregnancy and childbirth' WHEN diagnosis LIKE 'P%' THEN 'Perinatal period conditions' WHEN diagnosis LIKE 'Q%' THEN 'Congenital malformations' WHEN diagnosis LIKE 'R%' THEN 'Symptoms and signs' WHEN diagnosis LIKE 'S%' THEN 'Injury and poisoning' WHEN diagnosis LIKE 'T%' THEN 'Injury and poisoning' WHEN diagnosis LIKE 'V%' THEN 'External causes of morbidity' WHEN diagnosis LIKE 'W%' THEN 'External causes of morbidity' WHEN diagnosis LIKE 'X%' THEN 'External causes of morbidity' WHEN diagnosis LIKE 'Y%' THEN 'External causes of morbidity' WHEN diagnosis LIKE 'Z%' THEN 'Health status factors' ELSE 'Uncategorized' END AS diagnosis_category_name, COUNT(*) AS patient_count FROM patient_data GROUP BY diagnosis;\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"]
                }
              },
              "response": []
            },
            {
              "name": "3. Create dim_medications Table",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"DROP TABLE IF EXISTS dim_medications; CREATE TABLE dim_medications AS SELECT DISTINCT medicine AS medication_name, CASE WHEN medicine LIKE '%acid%' THEN 'Acid regulator' WHEN medicine LIKE '%acetaminophen%' THEN 'Analgesic' WHEN medicine LIKE '%ibuprofen%' THEN 'Anti-inflammatory' WHEN medicine LIKE '%naproxen%' THEN 'Anti-inflammatory' WHEN medicine LIKE '%hydroxide%' THEN 'Antacid' WHEN medicine LIKE '%antibiotic%' THEN 'Antibiotic' WHEN medicine LIKE '%alcohol%' THEN 'Antiseptic' WHEN medicine LIKE '%hydrocortisone%' THEN 'Corticosteroid' ELSE 'Other' END AS medication_category, COUNT(*) AS usage_count FROM patient_data GROUP BY medicine;\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"]
                }
              },
              "response": []
            },
            {
              "name": "4. Create fact_medical_records Table",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"DROP TABLE IF EXISTS fact_medical_records; CREATE TABLE fact_medical_records AS SELECT p.patient_id, d.diagnosis_code, m.medication_name, EXTRACT(YEAR FROM CAST(p.date_of_birth AS DATE)) AS year_of_birth, EXTRACT(MONTH FROM CAST(p.date_of_birth AS DATE)) AS month_of_birth, p.income_amount, p.income_category, p.age, p.age_group FROM patient_data pd JOIN dim_patients p ON pd.patient_id = p.patient_id JOIN dim_diagnoses d ON pd.diagnosis = d.diagnosis_code JOIN dim_medications m ON pd.medicine = m.medication_name;\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"]
                }
              },
              "response": []
            },
            {
              "name": "5. Create patient_demographics Table",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"DROP TABLE IF EXISTS patient_demographics; CREATE TABLE patient_demographics AS SELECT age_group, income_category, SUBSTRING(diagnosis, 1, 1) AS diagnosis_category, COUNT(*) AS patient_count, AVG(REPLACE(REPLACE(income, '$', ''), ',', '')::DECIMAL(18,2)) AS avg_income, MIN(REPLACE(REPLACE(income, '$', ''), ',', '')::DECIMAL(18,2)) AS min_income, MAX(REPLACE(REPLACE(income, '$', ''), ',', '')::DECIMAL(18,2)) AS max_income FROM patient_data CROSS JOIN (SELECT CASE WHEN YEAR(CURRENT_DATE) - YEAR(CAST(date_of_birth AS DATE)) < 18 THEN 'Under 18' WHEN YEAR(CURRENT_DATE) - YEAR(CAST(date_of_birth AS DATE)) BETWEEN 18 AND 35 THEN '18-35' WHEN YEAR(CURRENT_DATE) - YEAR(CAST(date_of_birth AS DATE)) BETWEEN 36 AND 50 THEN '36-50' WHEN YEAR(CURRENT_DATE) - YEAR(CAST(date_of_birth AS DATE)) BETWEEN 51 AND 65 THEN '51-65' ELSE 'Over 65' END AS age_group, CASE WHEN REPLACE(REPLACE(income, '$', ''), ',', '')::DECIMAL(18,2) > 150000 THEN 'High Income' WHEN REPLACE(REPLACE(income, '$', ''), ',', '')::DECIMAL(18,2) > 100000 THEN 'Medium Income' ELSE 'Low Income' END AS income_category FROM patient_data) d GROUP BY age_group, income_category, diagnosis_category ORDER BY age_group, income_category, diagnosis_category;\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"]
                }
              },
              "response": []
            },
            {
              "name": "6. Create time_analysis Table",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"DROP TABLE IF EXISTS time_analysis; CREATE TABLE time_analysis AS SELECT EXTRACT(YEAR FROM CAST(date_of_birth AS DATE)) AS birth_year, EXTRACT(MONTH FROM CAST(date_of_birth AS DATE)) AS birth_month, COUNT(*) AS patient_count, AVG(REPLACE(REPLACE(income, '$', ''), ',', '')::DECIMAL(18,2)) AS avg_income, COUNT(DISTINCT diagnosis) AS unique_diagnoses, COUNT(DISTINCT medicine) AS unique_medications FROM patient_data GROUP BY birth_year, birth_month ORDER BY birth_year, birth_month;\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"]
                }
              },
              "response": []
            },
            {
              "name": "Test: dim_patients - Structure",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'dim_patients';\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"]
                }
              },
              "response": []
            },
            {
              "name": "Test: dim_patients - Record Count",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"SELECT COUNT(*) AS total_patients FROM dim_patients;\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"]
                }
              },
              "response": []
            },
            {
              "name": "Test: dim_patients - Income Categories",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"SELECT income_category, COUNT(*) AS category_count FROM dim_patients GROUP BY income_category ORDER BY category_count DESC;\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"]
                }
              },
              "response": []
            },
            {
              "name": "Test: dim_patients - Age Groups",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"SELECT age_group, COUNT(*) AS group_count FROM dim_patients GROUP BY age_group ORDER BY CASE age_group WHEN 'Under 18' THEN 1 WHEN '18-35' THEN 2 WHEN '36-50' THEN 3 WHEN '51-65' THEN 4 WHEN 'Over 65' THEN 5 END;\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query?benchmark=true",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"],
                  "query": [
                    {
                      "key": "benchmark",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Test: dim_diagnoses - Structure",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'dim_diagnoses';\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"]
                }
              },
              "response": []
            },
            {
              "name": "Test: dim_diagnoses - Count by Category",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"SELECT diagnosis_category, diagnosis_category_name, COUNT(*) AS code_count, SUM(patient_count) AS total_patients FROM dim_diagnoses GROUP BY diagnosis_category, diagnosis_category_name ORDER BY total_patients DESC;\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"]
                }
              },
              "response": []
            },
            {
              "name": "Test: dim_medications - Structure",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'dim_medications';\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"]
                }
              },
              "response": []
            },
            {
              "name": "Test: dim_medications - Category Distribution",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"SELECT medication_category, COUNT(*) AS medication_count, SUM(usage_count) AS total_usage FROM dim_medications GROUP BY medication_category ORDER BY total_usage DESC;\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"]
                }
              },
              "response": []
            },
            {
              "name": "Test: fact_medical_records - Structure",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'fact_medical_records';\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"]
                }
              },
              "response": []
            },
            {
              "name": "Test: fact_medical_records - Record Count",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"SELECT COUNT(*) AS total_records FROM fact_medical_records;\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"]
                }
              },
              "response": []
            },
            {
              "name": "Test: fact_medical_records - Income by Year of Birth",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"SELECT year_of_birth, COUNT(*) AS patient_count, AVG(income_amount) AS avg_income FROM fact_medical_records GROUP BY year_of_birth ORDER BY year_of_birth;\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"]
                }
              },
              "response": []
            },
            {
              "name": "Test: patient_demographics - Structure",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'patient_demographics';\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"]
                }
              },
              "response": []
            },
            {
              "name": "Test: patient_demographics - Aggregations",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"SELECT age_group, income_category, SUM(patient_count) AS total_patients, ROUND(AVG(avg_income), 2) AS average_income FROM patient_demographics GROUP BY age_group, income_category ORDER BY CASE age_group WHEN 'Under 18' THEN 1 WHEN '18-35' THEN 2 WHEN '36-50' THEN 3 WHEN '51-65' THEN 4 WHEN 'Over 65' THEN 5 END, income_category;\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"]
                }
              },
              "response": []
            },
            {
              "name": "Test: time_analysis - Structure",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'time_analysis';\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"]
                }
              },
              "response": []
            },
            {
              "name": "Test: time_analysis - Year Summary",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"SELECT birth_year, SUM(patient_count) AS total_patients, ROUND(AVG(avg_income), 2) AS average_income, SUM(unique_diagnoses) AS total_unique_diagnoses, SUM(unique_medications) AS total_unique_medications FROM time_analysis GROUP BY birth_year ORDER BY birth_year;\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"]
                }
              },
              "response": []
            },
            {
              "name": "Analysis: Top Diagnoses by Income Category",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"SELECT f.income_category, d.diagnosis_code, d.diagnosis_category_name, COUNT(*) AS patient_count FROM fact_medical_records f JOIN dim_diagnoses d ON f.diagnosis_code = d.diagnosis_code GROUP BY f.income_category, d.diagnosis_code, d.diagnosis_category_name ORDER BY f.income_category, patient_count DESC LIMIT 15;\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"]
                }
              },
              "response": []
            },
            {
              "name": "Analysis: Medication Usage by Age Group",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"SELECT f.age_group, m.medication_category, COUNT(*) AS usage_count FROM fact_medical_records f JOIN dim_medications m ON f.medication_name = m.medication_name GROUP BY f.age_group, m.medication_category ORDER BY CASE f.age_group WHEN 'Under 18' THEN 1 WHEN '18-35' THEN 2 WHEN '36-50' THEN 3 WHEN '51-65' THEN 4 WHEN 'Over 65' THEN 5 END, usage_count DESC;\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"]
                }
              },
              "response": []
            },
            {
              "name": "Analysis: Diagnosis Distribution by Year of Birth",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"SELECT f.year_of_birth, d.diagnosis_category, d.diagnosis_category_name, COUNT(*) AS case_count FROM fact_medical_records f JOIN dim_diagnoses d ON f.diagnosis_code = d.diagnosis_code GROUP BY f.year_of_birth, d.diagnosis_category, d.diagnosis_category_name ORDER BY f.year_of_birth, case_count DESC;\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/query",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "query"]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "try {",
                  "    const responseJson = pm.response.json();",
                  "    ",
                  "    if (responseJson.hasOwnProperty('columns') && responseJson.hasOwnProperty('results')) {",
                  "        pm.test(\"Response has the expected structure\", function () {",
                  "            pm.expect(responseJson).to.have.property('columns').that.is.an('array');",
                  "            pm.expect(responseJson).to.have.property('results').that.is.an('array');",
                  "            pm.expect(responseJson).to.have.property('status').that.is.a('string');",
                  "        });",
                  "        ",
                  "        pm.test(\"Status is success\", function () {",
                  "            pm.expect(responseJson.status).to.equal('success');",
                  "        });",
                  "    } else if (responseJson.hasOwnProperty('status')) {",
                  "        pm.test(\"Operation was successful\", function () {",
                  "            pm.expect(responseJson.status).to.equal('success');",
                  "        });",
                  "    }",
                  "} catch (e) {",
                  "    console.log('Not a JSON response or another error occurred');",
                  "}",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "tables",
          "item": [
            {
              "name": "List tables",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "   pm.response.to.have.status(200);",
                      "});",
                      "",
                      "// Test overall response structure",
                      "pm.test(\"Response has the expected structure\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   pm.expect(responseJson).to.have.property('tables').that.is.an('array');",
                      "});",
                      "",
                      "// Validate the response structure against the JSON schema",
                      "pm.test(\"Response structure is valid\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   pm.expect(responseJson.tables).to.satisfy(function(tables) {",
                      "      return tables.every(function(table) {",
                      "         return table.hasOwnProperty('name') &&",
                      "                table.hasOwnProperty('columns') &&",
                      "                Array.isArray(table.columns) &&",
                      "                table.columns.every(function(column) {",
                      "                   return column.hasOwnProperty('name') &&",
                      "                          column.hasOwnProperty('type') &&",
                      "                          column.hasOwnProperty('nullable');",
                      "                });",
                      "      });",
                      "   });",
                      "});",
                      "",
                      "// Test tables array contains patient_data",
                      "pm.test(\"Tables array contains patient_data\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   const tableNames = responseJson.tables.map(table => table.name);",
                      "   pm.expect(tableNames).to.include(\"patient_data\");",
                      "});",
                      "",
                      "// Test tables array length",
                      "pm.test(\"Tables array contains at least one table\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   pm.expect(responseJson.tables.length).to.be.at.least(1);",
                      "});",
                      "",
                      "// Test if response is valid JSON",
                      "pm.test(\"Response is valid JSON\", function () {",
                      "   pm.response.to.be.json;",
                      "});",
                      "",
                      "// Test response headers",
                      "pm.test(\"Content-Type header is present\", function () {",
                      "   pm.response.to.have.header(\"Content-Type\");",
                      "});",
                      "",
                      "// Test Content-Type is application/json",
                      "pm.test(\"Content-Type is application/json\", function () {",
                      "   pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                      "});",
                      "",
                      "// Test response time",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "   pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "",
                      "// Test that tables array contains only objects",
                      "pm.test(\"Tables array contains only objects\", function () {",
                      "   const responseJson = pm.response.json();",
                      "   const allObjects = responseJson.tables.every(item => typeof item === 'object' && !Array.isArray(item));",
                      "   pm.expect(allObjects).to.be.true;",
                      "});",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/tables",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "tables"]
                },
                "description": "Get a list of all tables in the database"
              },
              "response": [
                {
                  "name": "List of tables retrieved successfully",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/tables",
                      "host": ["{{baseUrl}}"],
                      "path": ["api", "tables"]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"tables\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}"
                },
                {
                  "name": "Internal server error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/api/tables",
                      "host": ["{{baseUrl}}"],
                      "path": ["api", "tables"]
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "text",
                  "header": [],
                  "cookie": [],
                  "body": ""
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080"
    }
  ]
}

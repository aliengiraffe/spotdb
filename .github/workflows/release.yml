name: Release

on:
  push:
    tags:
      - "v*"
permissions:
  packages: write
  contents: write

env:
  GOLANG_VERSION: 1.25.2
  MCP_PUBLISHER_VERSION: 1.2.3

jobs:
  homebrew-release:
    name: Publish on homebrew
    environment:
      name: main
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: "${{ env.GOLANG_VERSION }}"

      - name: Install DuckDB dependencies
        run: |
          brew install duckdb
          echo "DUCKDB_PREFIX=$(brew --prefix duckdb)" >> $GITHUB_ENV

      - name: Clean and download dependencies
        run: |
          go clean -modcache
          go mod download
          go mod tidy

      - name: Get token from Github App
        uses: actions/create-github-app-token@v2
        id: app_token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY}}
          owner: ${{ github.repository_owner }}
          repositories: homebrew-spaceship

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@a08664b80c0ab417b1babcbf750274aed2018fef
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HOMEBREW_GITHUB_API_TOKEN: ${{ steps.app_token.outputs.token }}

  docker-release:
    name: Release on Dockerhub
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435

      - name: Login to Docker Hub
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef
        with:
          username: ${{ vars.DOCKERHUB_ORGANIZATION }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@032a4b3bda1b716928481836ac5bfe36e1feaad6
        with:
          images: ${{ vars.DOCKERHUB_ORGANIZATION }}/${{ vars.DOCKERHUB_REPOSITORY }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          pull: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            ${{ steps.meta.outputs.labels }}
            io.modelcontextprotocol.server.name=ai.aliengiraffe/${{ vars.DOCKERHUB_REPOSITORY }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  mcp-release:
    name: Release to MCP Registry
    runs-on: ubuntu-latest
    needs: [docker-release]
    steps:
      - uses: actions/checkout@v5

      - name: Install MCP Publisher
        run: |
          uname -s
          uname -m
          echo "https://github.com/modelcontextprotocol/registry/releases/download/latest/mcp-publisher_$(uname -s | tr '[:upper:]' '[:lower:]')_$(uname -m | sed 's/x86_64/amd64/;s/aarch64/arm64/').tar.gz"
          curl -L "https://github.com/modelcontextprotocol/registry/releases/download/v${{ env.MCP_PUBLISHER_VERSION }}/mcp-publisher_${{ env.MCP_PUBLISHER_VERSION }}_$(uname -s | tr '[:upper:]' '[:lower:]')_$(uname -m | sed 's/x86_64/amd64/;s/aarch64/arm64/').tar.gz" | tar xz mcp-publisher

      - name: Setup MCP private key
        env:
          MCP_PRIVATE_KEY: ${{ secrets.MCP_PRIVATE_KEY }}
        run: |
          echo "$MCP_PRIVATE_KEY" > key.pem
          chmod 600 key.pem

      - name: Login to MCP Registry
        run: ./mcp-publisher login dns --domain ${{ vars.A10E_DNS }} --private-key $(openssl pkey -in key.pem -noout -text | grep -A3 "priv:" | tail -n +2 | tr -d ' :\n')

      - name: Cleanup private key
        if: always()
        run: rm -f key.pem

      - name: Establish version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          jq --arg v "$VERSION" '.version = $v | .packages[0].version = $v' server.json > tmp && mv tmp server.json
          echo "version to be published: $VERSION"

      - name: Publish to MCP Registry
        run: ./mcp-publisher publish

name: Docker

on:
  push:
    branches: [fix-workflow, main]

permissions:
  contents: read
env:
  GOLANG_VERSION: 1.25.1
  DOCKERHUB_REPOSITORY: "spotdb"

jobs:
  test:
    name: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v6
        with:
          go-version: "${{ env.GOLANG_VERSION }}"
      - name: Test
        run: go test -v ./...

  postman:
    name: postman
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: "${{ env.GOLANG_VERSION }}"

      - name: Install dependencies
        run: go mod download

      - name: Start server
        run: |
          # Start the server and save its PID
          export ENV_SERVER_MODE=test
          go run main.go > server.log 2>&1 &
          echo $! > server.pid

          # Wait for the server to be ready
          echo "Waiting for server to be ready..."
          timeout=30
          while [ $timeout -gt 0 ]; do
            if curl -s http://localhost:8080/health > /dev/null; then
              echo "Server is up and running"
              break
            fi
            echo "Still waiting... ($timeout seconds left)"
            sleep 1
            timeout=$((timeout - 1))
          done

          if [ $timeout -eq 0 ]; then
            echo "Server failed to start within the timeout period"
            cat server.log
            exit 1
          fi

      - uses: matt-ball/newman-action@v2.0.0
        with:
          collection: "postman/a10e.postman_collection.json"
          environment: "postman/a10e.postman_environment.json"

      - name: Server logs on failure
        if: ${{ failure() }}
        run: cat server.log

      - name: Stop server
        if: ${{ always() }}
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            echo "Server stopped"
          fi

  build:
    if: true # Enable this to build the binary
    environment:
      name: fix-workflow
    runs-on: ubuntu-24.04-arm
    permissions:
      contents: read
      packages: write
      id-token: write # required to use OIDC auth

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Go with Private Modules
        uses: actions/setup-go@v6
        with:
          go-version: "${{ env.GOLANG_VERSION }}"

      - name: Build binary and get version
        run: |
          go build -ldflags='-s' -v -o bin/spotdb .
          echo "VERSION=$(./bin/spotdb -version)" >> $GITHUB_ENV

      - name: Get token from Github App
        uses: actions/create-github-app-token@v2
        id: app_token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY}}
          owner: ${{ github.repository_owner }}
          repositories: homebrew-spaceship

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@a08664b80c0ab417b1babcbf750274aed2018fef
        with:
          distribution: goreleaser
          version: latest
          args: release --clean --snapshot
        env:
          GITHUB_TOKEN: ${{ steps.app_token.outputs.token }}
          HOMEBREW_GITHUB_API_TOKEN: ${{ steps.app_token.outputs.token }}

  docker:
    name: build docker image
    runs-on: ubuntu-24.04-arm
    needs: [test, postman]
    steps:
      - uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_ORGANIZATION }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.DOCKERHUB_ORGANIZATION }}/${{ env.DOCKERHUB_REPOSITORY }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
